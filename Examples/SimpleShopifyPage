# -------------------------------------------------------------------
# GENERATED BY CHAT GPT O1 MODEL
# -------------------------------------------------------------------
# A "Shopify-style" page using QuykHtml:
#  - 50 fake items displayed in a grid
#  - Each item shows name, price, description
#  - Search bar filters items in real-time by name
# -------------------------------------------------------------------

import random
from QuykHtml import qhtml

def main():
    # 1. Instantiate QuykHtml
    q = qhtml()
    # 2. Use Bootstrap for grid layouts and quick styling
    q.bootstrap.use(True)

    # ----------------------------------------------------------------
    # CUSTOM CSS FOR PRODUCT LAYOUT
    # ----------------------------------------------------------------
    q.css.add([
        # Container for our entire page
        [".page-container",
         "width:90%;margin:auto;padding-top:40px;padding-bottom:40px;"],

        # Search bar styling
        [".search-bar",
         "width:100%;max-width:400px;margin:0 auto 40px auto;display:block;"],

        # Product card container
        [".product-card",
         "border:1px solid #eee;border-radius:6px;"
         "box-shadow:0 2px 6px rgba(0,0,0,0.1);"
         "padding:16px;text-align:center;margin-bottom:20px;"
         "transition:all 0.3s ease;"],

        # Product name
        [".product-title",
         "font-weight:bold;font-size:18px;margin-bottom:6px;color:#333;"],

        # Product price
        [".product-price",
         "color:#FF5722;font-size:16px;font-weight:bold;margin-bottom:10px;"],

        # Product description
        [".product-desc",
         "font-size:14px;color:#666;margin-bottom:10px;"],

        # Hover effect for product card
        [".product-card:hover",
         "transform:translateY(-2px);box-shadow:0 4px 12px rgba(0,0,0,0.12);"],

        # "Add to Cart" button (just for show)
        [".cart-btn",
         "background-color:#28a745;color:#fff;border:none;"
         "padding:8px 12px;border-radius:4px;cursor:pointer;"],
        [".cart-btn:hover",
         "background-color:#218838;"]
    ])

    # ----------------------------------------------------------------
    # JAVASCRIPT SEARCH FUNCTION
    # ----------------------------------------------------------------
    # This function reads the input from searchInput and hides/shows
    # product cards based on whether the product name includes the query.
    filter_js = r"""
    function filterProducts() {
      let input = document.getElementById('searchInput').value.toLowerCase();
      let items = document.getElementsByClassName('product-card');
      for (let i = 0; i < items.length; i++) {
        let productName = items[i].getAttribute('data-product-name');
        if (productName.toLowerCase().includes(input)) {
          items[i].style.display = 'block';
        } else {
          items[i].style.display = 'none';
        }
      }
    }
    """
    # Add our filter JS to the page scripts
    q.scripts.append(filter_js)

    # ----------------------------------------------------------------
    # PAGE STRUCTURE
    # ----------------------------------------------------------------
    # A container div for the entire page
    page_container = q.new("div").set_class("page-container")

    # -------------------- SEARCH BAR --------------------
    search_wrapper = q.new("div").style.set("text-align:center;margin-bottom:30px;")
    search_input = q.new("input") \
        .set_class("search-bar") \
        .set_id("searchInput") \
        .add_attribute('placeholder="Search products..."') \
        .add_attribute('onkeyup="filterProducts();"')  # Replaces on_key_up call

    search_wrapper.insert(search_input)
    page_container.insert(search_wrapper)

    # ------------------- PRODUCT GRID -------------------
    # Bootstrap row for product cards
    product_row = q.new("div").set_class("row")

    # Generate 50 fake items
    # For variety, random prices between $10-$99, random short lorem text
    for i in range(1, 51):
        product_name = f"Product {i}"
        product_price = f"${random.randint(10,99)}.99"
        # Some short placeholder text (fake description)
        product_desc = (
            "Lorem ipsum dolor sit amet, consectetur adipiscing elit. "
            "Mauris dictum, justo vitae imperdiet efficitur, elit sapien."
        )

        # Create a column for each product card
        col = q.new("div").set_class("col-md-3 col-sm-6 col-xs-12")

        # The card itself
        card = q.new("div")\
                .set_class("product-card")\
                .add_attribute(f'data-product-name="{product_name}"')

        # Title
        title_el = q.new("div").set_class("product-title").set_text(product_name)
        # Price
        price_el = q.new("div").set_class("product-price").set_text(product_price)
        # Description
        desc_el = q.new("div").set_class("product-desc").set_text(product_desc)
        # Add to Cart button
        cart_btn = q.new("button").set_class("cart-btn").set_text("Add to Cart")

        # Insert these into the card
        card.insert([title_el, price_el, desc_el, cart_btn])
        # Put card in column
        col.insert(card)
        # Put column in row
        product_row.insert(col)

    # Insert product row into page_container
    page_container.insert(product_row)

    # ---------------------- FOOTER ----------------------
    # Just a simple footer
    footer = q.new("footer").style.set(
        "margin-top:40px;padding:20px;text-align:center;background-color:#333;color:#fff;"
        "border-top:1px solid #444;"
    )
    footer_text = q.new("p").set_text("Â© 2025 My Shopify-Style Store")
    footer.insert(footer_text)

    # Insert footer in the page container
    page_container.insert(footer)

    # ----------------------------------------------------------------
    # PUT EVERYTHING INTO THE DISPLAY & RENDER
    # ----------------------------------------------------------------
    q.display.insert(page_container)

    # Optional SEO
    q.seo.set_page_title("Shopify-Style Store")
    q.seo.set_page_description("A sample store page with 50 items, built using QuykHtml.")
    # q.seo.set_page_keywords("shop, ecommerce, store, QuykHtml")

    # Finally, render out the page (which should open automatically)
    q.render("shopify_style_page.html")

if __name__ == "__main__":
    main()
